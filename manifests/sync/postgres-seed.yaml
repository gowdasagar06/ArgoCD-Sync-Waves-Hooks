kind: ConfigMap
apiVersion: v1
metadata:
  name: postgres-script
  namespace: vote-app
  annotations:
    argocd.argoproj.io/sync-wave: "1"
data:
  SQL_SCRIPT: |-
    drop table if exists vote;

    --
    -- Create table `vote`
    --
    CREATE TABLE vote (
      name varchar(255),
      value integer
    );

    -- 
    -- Insert values into `vote`
    --
    INSERT INTO vote VALUES
    ('up', '0'),
    ('down', '0');
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-fill
  namespace: vote-app
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    # /!\ if you use job/cronjob + ttlSecondsAfterFinished with argocd, argocd will instantly recreate the job.
    # because the desired state differs from the new current state (argocd ignore your `ttlSecondsAfterFinished` declaration)
    # to resolve this use : `hook: Sync` + `hook-delete-policy: HookSucceeded`
    # https://serverfault.com/a/1112049
    # https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/#usage
    # hooks are simply Kubernetes manifests tracked in the source repository of your Argo CD Application using the annotation `hook`
    # Sync : Executes after all PreSync hooks completed and were successful, at the same time as the application of the manifests.
    argocd.argoproj.io/hook: Sync
    # https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/#hook-deletion-policies
    # hooks can be deleted in an automatic fashion using the annotation `hook-delete-policy`
    # HookSucceeded : The hook resource is deleted after the hook succeeded (e.g. Job/Workflow completed successfully)
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  # https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
  # number of retries before considering a Job as failed
  # default `6` 
  # exponential back-off delay (10s, 20s, 40s, 1m20s (80s), 2m40s (160s), 5m20s (320s), 6m (360s)) capped at six minutes
  backoffLimit: 0
  # https://kubernetes.io/docs/concepts/workloads/controllers/job/#ttl-mechanism-for-finished-jobs
  # if the field is set to `0`, the Job will be eligible to be automatically deleted immediately after it finishes
  # if the field is unset, this Job won't be cleaned up by the TTL controller after it finishes
  # note : it is recommended to set `ttlSecondsAfterFinished`
  ttlSecondsAfterFinished: 10
  template:
    spec:
      # https://kubernetes.io/docs/concepts/workloads/controllers/job/#handling-pod-and-container-failures
      # a container in a Pod may fail if pod fails because the process in it exited with a non-zero exit code,
      # killed for exceeding a memory limit, ...
      # `OnFailure` : the Pod stays on the node, but the container is re-run
      # an entire Pod can fail if the pod is kicked off the node (node is upgraded, rebooted, deleted), ...
      # `Never` : when a Pod fails, then the Job controller starts a new Pod. Your application needs to handle
      # the case when it is restarted in a new pod (handle temporary files, locks, incomplete output) caused by previous runs
      restartPolicy: Never
      volumes:
        - name: script
          configMap:
            name: postgres-script
            items:
              - key: SQL_SCRIPT
                path: SQL_SCRIPT_DUMP
      # https://stackoverflow.com/a/52795933/1503073
      initContainers:
      - name: init-vote
        image: busybox:latest
        command: ['sh', '-c', 'until nc -vz postgres 5432 ; do sleep 1; done;']
      containers:
        - name: postgres-fill
          image: postgres:14.3-alpine # 'docker.io/bitnami/postgresql:latest'
          volumeMounts:
            - name: script
              mountPath: '/script'
          env:
            - name: POSTGRES_DB
              value: vote
            - name: POSTGRES_USER
              value: admin
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_HOST
              value: "postgres"
            - name: SQL_SCRIPT
              valueFrom:
                configMapKeyRef:
                  name: postgres-script
                  key: SQL_SCRIPT
          command:
            - /bin/sh
          args:
            - -c
            - psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB} --command="${SQL_SCRIPT}"
